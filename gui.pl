:- use_module(library(pce)).

boardFile('Images/my_board.jpg').
indicatorFile('Images/indicator.jpg').



updateCardSlotsGUI(1) :- readCardSlot(1, Card),last(Card, File),  free(@card1), send(@main, display, new(@card1, bitmap(File)), point(155,325)), send(@main, flush);  free(@card1).
updateCardSlotsGUI(2) :- readCardSlot(2, Card),last(Card, File),  free(@card2), send(@main, display, new(@card2, bitmap(File)), point(267,325)), send(@main, flush);  free(@card2).
updateCardSlotsGUI(3) :- readCardSlot(3, Card),last(Card, File),  free(@card3), send(@main, display, new(@card3, bitmap(File)), point(379,325)), send(@main, flush);  free(@card3).
updateCardSlotsGUI(4) :- readCardSlot(4, Card),last(Card, File),  free(@card4), send(@main, display, new(@card4, bitmap(File)), point(490,325)), send(@main, flush);  free(@card4).
updateCardSlotsGUI(5) :- readCardSlot(5, Card),last(Card, File),  free(@card5), send(@main, display, new(@card5, bitmap(File)), point(155,180)), send(@main, flush);  free(@card5).
updateCardSlotsGUI(6) :- readCardSlot(6, Card),last(Card, File),  free(@card6), send(@main, display, new(@card6, bitmap(File)), point(267,180)), send(@main, flush);  free(@card6).
updateCardSlotsGUI(7) :- readCardSlot(7, Card),last(Card, File),  free(@card7), send(@main, display, new(@card7, bitmap(File)), point(379,180)), send(@main, flush);  free(@card7).
updateCardSlotsGUI(8) :- readCardSlot(8, Card),last(Card, File),  free(@card8), send(@main, display, new(@card8, bitmap(File)), point(490,180)), send(@main, flush);  free(@card8).
updateCardSlotsGUI(9) :- readCardSlot(9, Card),last(Card, File),  free(@card9), send(@main, display, new(@card9, bitmap(File)), point(155,35)), send(@main, flush);  free(@card9).
updateCardSlotsGUI(10) :- readCardSlot(10, Card),last(Card, File),  free(@card10), send(@main, display, new(@card10, bitmap(File)), point(267,35)), send(@main, flush);  free(@card10).
updateCardSlotsGUI(11) :- readCardSlot(11, Card),last(Card, File),  free(@card11), send(@main, display, new(@card11, bitmap(File)), point(379,35)), send(@main, flush);  free(@card11).
updateCardSlotsGUI(12) :- readCardSlot(12, Card),last(Card, File),  free(@card12), send(@main, display, new(@card12, bitmap(File)), point(490,35)), send(@main, flush);  free(@card12).
updateCardSlotsGUI(13) :- readCardSlot(13, Card),last(Card, File),  free(@card13), send(@main, display, new(@card13, bitmap(File)), point(700,35)), send(@main, flush);  free(@card13).
updateCardSlotsGUI(14) :- readCardSlot(14, Card),last(Card, File),  free(@card14), send(@main, display, new(@card14, bitmap(File)), point(700,107)), send(@main, flush);  free(@card14).
updateCardSlotsGUI(15) :- readCardSlot(15, Card),last(Card, File),  free(@card15), send(@main, display, new(@card15, bitmap(File)), point(700,179)), send(@main, flush);  free(@card15).
updateCardSlotsGUI(16) :- readCardSlot(16, Card),last(Card, File),  free(@card16), send(@main, display, new(@card16, bitmap(File)), point(700,251)), send(@main, flush);  free(@card16).
updateCardSlotsGUI(17) :- readCardSlot(17, Card),last(Card, File),  free(@card17), send(@main, display, new(@card17, bitmap(File)), point(700,320)), send(@main, flush);  free(@card17).
updateCardSlotsGUI(18) :- readCardSlot(18, Card),last(Card, File),  free(@card18), send(@main, display, new(@card18, bitmap(File)), point(42,325)), send(@main, flush);  free(@card18).
updateCardSlotsGUI(19) :- readCardSlot(19, Card),last(Card, File),  free(@card19), send(@main, display, new(@card19, bitmap(File)), point(42,180)), send(@main, flush);  free(@card19).
updateCardSlotsGUI(20) :- readCardSlot(20, Card),last(Card, File),  free(@card20), send(@main, display, new(@card20, bitmap(File)), point(42,35)), send(@main, flush);  free(@card20).

%p1 reserved cards
updateCardSlotsGUI(21) :- readCardSlot(21, Card),last(Card, File),  free(@card21), send(@main, display, new(@card21, bitmap(File)), point(65,555)), send(@main, flush);  free(@card21).
updateCardSlotsGUI(22) :- readCardSlot(22, Card),last(Card, File),  free(@card22), send(@main, display, new(@card22, bitmap(File)), point(125,590)), send(@main, flush);  free(@card22).
updateCardSlotsGUI(23) :- readCardSlot(23, Card),last(Card, File),  free(@card23), send(@main, display, new(@card23, bitmap(File)), point(185,625)), send(@main, flush);  free(@card23).

%p2 reserved cards
updateCardSlotsGUI(24) :- readCardSlot(24, Card),last(Card, File),  free(@card24), send(@main, display, new(@card24, bitmap(File)), point(330,555)), send(@main, flush);  free(@card24).
updateCardSlotsGUI(25) :- readCardSlot(25, Card),last(Card, File),  free(@card25), send(@main, display, new(@card25, bitmap(File)), point(390,590)), send(@main, flush);  free(@card25).
updateCardSlotsGUI(26) :- readCardSlot(26, Card),last(Card, File),  free(@card26), send(@main, display, new(@card26, bitmap(File)), point(450,625)), send(@main, flush);  free(@card26).

%p3 reserved cards
updateCardSlotsGUI(27) :- readCardSlot(27, Card),last(Card, File),  free(@card27), send(@main, display, new(@card27, bitmap(File)), point(595,555)), send(@main, flush);  free(@card27).
updateCardSlotsGUI(28) :- readCardSlot(28, Card),last(Card, File),  free(@card28), send(@main, display, new(@card28, bitmap(File)), point(655,590)), send(@main, flush);  free(@card28).
updateCardSlotsGUI(29) :- readCardSlot(29, Card),last(Card, File),  free(@card29), send(@main, display, new(@card29, bitmap(File)), point(715,625)), send(@main, flush);  free(@card29).

%p4 reserved cards
updateCardSlotsGUI(30) :- readCardSlot(30, Card),last(Card, File),  free(@card30), send(@main, display, new(@card30, bitmap(File)), point(860,555)), send(@main, flush);  free(@card30).
updateCardSlotsGUI(31) :- readCardSlot(31, Card),last(Card, File),  free(@card31), send(@main, display, new(@card31, bitmap(File)), point(920,590)), send(@main, flush);  free(@card31).
updateCardSlotsGUI(32) :- readCardSlot(32, Card),last(Card, File),  free(@card32), send(@main, display, new(@card32, bitmap(File)), point(980,625)), send(@main, flush);  free(@card32).

%indicator coordinates

updateIndicatorGUI(1) :-indicatorFile(IndiFile),currentPlayer(Player),cardPower(Player,WhiteCard,BlueCard,GreenCard,RedCard,BlackCard),coinPower(Player,WhiteCoin,BlueCoin,GreenCoin,RedCoin,BlackCoin,GoldCoin), readCardSlot(1, Card),[_,Point,Color,WhiteReq,BlueReq,GreenReq,RedReq,BlackReq,_] = Card,(tempGold(IsTempGold),retract(tempGold(_));true),assert(tempGold(GoldCoin)),( ( tempGold(TempGold1), ( WhiteCard+WhiteCoin >= WhiteReq; ( NewGoldCoinA is WhiteCard+WhiteCoin-WhiteReq+TempGold1, NewGoldCoinA >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinA))))), ( tempGold(TempGold2), (BlueCard+BlueCoin >= BlueReq; (NewGoldCoinB is BlueCard+BlueCoin-BlueReq+TempGold2, NewGoldCoinB >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinB))))), ( tempGold(TempGold3), (GreenCard+GreenCoin >= GreenReq; (NewGoldCoinC is GreenCard+GreenCoin-GreenReq+TempGold3, NewGoldCoinC >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinC))))), ( tempGold(TempGold4), (RedCard+RedCoin >= RedReq; (NewGoldCoinD is RedCard+RedCoin-RedReq+TempGold4, NewGoldCoinD >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinD))))), ( tempGold(TempGold5), (BlackCard+BlackCoin >= BlackReq; (NewGoldCoinE is BlackCard+BlackCoin-BlackReq+TempGold5, NewGoldCoinE >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinE)))))),  free(@indi1), send(@main, display, new(@indi1, bitmap(IndiFile)), point(155,325)), send(@main, flush);  free(@indi1).
updateIndicatorGUI(2) :-indicatorFile(IndiFile),currentPlayer(Player),cardPower(Player,WhiteCard,BlueCard,GreenCard,RedCard,BlackCard),coinPower(Player,WhiteCoin,BlueCoin,GreenCoin,RedCoin,BlackCoin,GoldCoin), readCardSlot(2, Card),[_,Point,Color,WhiteReq,BlueReq,GreenReq,RedReq,BlackReq,_] = Card,(tempGold(IsTempGold),retract(tempGold(_));true),assert(tempGold(GoldCoin)),( ( tempGold(TempGold1), ( WhiteCard+WhiteCoin >= WhiteReq; ( NewGoldCoinA is WhiteCard+WhiteCoin-WhiteReq+TempGold1, NewGoldCoinA >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinA))))), ( tempGold(TempGold2), (BlueCard+BlueCoin >= BlueReq; (NewGoldCoinB is BlueCard+BlueCoin-BlueReq+TempGold2, NewGoldCoinB >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinB))))), ( tempGold(TempGold3), (GreenCard+GreenCoin >= GreenReq; (NewGoldCoinC is GreenCard+GreenCoin-GreenReq+TempGold3, NewGoldCoinC >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinC))))), ( tempGold(TempGold4), (RedCard+RedCoin >= RedReq; (NewGoldCoinD is RedCard+RedCoin-RedReq+TempGold4, NewGoldCoinD >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinD))))), ( tempGold(TempGold5), (BlackCard+BlackCoin >= BlackReq; (NewGoldCoinE is BlackCard+BlackCoin-BlackReq+TempGold5, NewGoldCoinE >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinE)))))),  free(@indi2), send(@main, display, new(@indi2, bitmap(IndiFile)), point(267,325)), send(@main, flush);  free(@indi2).
updateIndicatorGUI(3) :-indicatorFile(IndiFile),currentPlayer(Player),cardPower(Player,WhiteCard,BlueCard,GreenCard,RedCard,BlackCard),coinPower(Player,WhiteCoin,BlueCoin,GreenCoin,RedCoin,BlackCoin,GoldCoin), readCardSlot(3, Card),[_,Point,Color,WhiteReq,BlueReq,GreenReq,RedReq,BlackReq,_] = Card,(tempGold(IsTempGold),retract(tempGold(_));true),assert(tempGold(GoldCoin)),( ( tempGold(TempGold1), ( WhiteCard+WhiteCoin >= WhiteReq; ( NewGoldCoinA is WhiteCard+WhiteCoin-WhiteReq+TempGold1, NewGoldCoinA >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinA))))), ( tempGold(TempGold2), (BlueCard+BlueCoin >= BlueReq; (NewGoldCoinB is BlueCard+BlueCoin-BlueReq+TempGold2, NewGoldCoinB >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinB))))), ( tempGold(TempGold3), (GreenCard+GreenCoin >= GreenReq; (NewGoldCoinC is GreenCard+GreenCoin-GreenReq+TempGold3, NewGoldCoinC >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinC))))), ( tempGold(TempGold4), (RedCard+RedCoin >= RedReq; (NewGoldCoinD is RedCard+RedCoin-RedReq+TempGold4, NewGoldCoinD >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinD))))), ( tempGold(TempGold5), (BlackCard+BlackCoin >= BlackReq; (NewGoldCoinE is BlackCard+BlackCoin-BlackReq+TempGold5, NewGoldCoinE >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinE)))))),  free(@indi3), send(@main, display, new(@indi3, bitmap(IndiFile)), point(379,325)), send(@main, flush);  free(@indi3).
updateIndicatorGUI(4) :-indicatorFile(IndiFile),currentPlayer(Player),cardPower(Player,WhiteCard,BlueCard,GreenCard,RedCard,BlackCard),coinPower(Player,WhiteCoin,BlueCoin,GreenCoin,RedCoin,BlackCoin,GoldCoin), readCardSlot(4, Card),[_,Point,Color,WhiteReq,BlueReq,GreenReq,RedReq,BlackReq,_] = Card,(tempGold(IsTempGold),retract(tempGold(_));true),assert(tempGold(GoldCoin)),( ( tempGold(TempGold1), ( WhiteCard+WhiteCoin >= WhiteReq; ( NewGoldCoinA is WhiteCard+WhiteCoin-WhiteReq+TempGold1, NewGoldCoinA >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinA))))), ( tempGold(TempGold2), (BlueCard+BlueCoin >= BlueReq; (NewGoldCoinB is BlueCard+BlueCoin-BlueReq+TempGold2, NewGoldCoinB >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinB))))), ( tempGold(TempGold3), (GreenCard+GreenCoin >= GreenReq; (NewGoldCoinC is GreenCard+GreenCoin-GreenReq+TempGold3, NewGoldCoinC >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinC))))), ( tempGold(TempGold4), (RedCard+RedCoin >= RedReq; (NewGoldCoinD is RedCard+RedCoin-RedReq+TempGold4, NewGoldCoinD >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinD))))), ( tempGold(TempGold5), (BlackCard+BlackCoin >= BlackReq; (NewGoldCoinE is BlackCard+BlackCoin-BlackReq+TempGold5, NewGoldCoinE >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinE)))))),  free(@indi4), send(@main, display, new(@indi4, bitmap(IndiFile)), point(490,325)), send(@main, flush);  free(@indi4).
updateIndicatorGUI(5) :-indicatorFile(IndiFile),currentPlayer(Player),cardPower(Player,WhiteCard,BlueCard,GreenCard,RedCard,BlackCard),coinPower(Player,WhiteCoin,BlueCoin,GreenCoin,RedCoin,BlackCoin,GoldCoin), readCardSlot(5, Card),[_,Point,Color,WhiteReq,BlueReq,GreenReq,RedReq,BlackReq,_] = Card,(tempGold(IsTempGold),retract(tempGold(_));true),assert(tempGold(GoldCoin)),( ( tempGold(TempGold1), ( WhiteCard+WhiteCoin >= WhiteReq; ( NewGoldCoinA is WhiteCard+WhiteCoin-WhiteReq+TempGold1, NewGoldCoinA >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinA))))), ( tempGold(TempGold2), (BlueCard+BlueCoin >= BlueReq; (NewGoldCoinB is BlueCard+BlueCoin-BlueReq+TempGold2, NewGoldCoinB >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinB))))), ( tempGold(TempGold3), (GreenCard+GreenCoin >= GreenReq; (NewGoldCoinC is GreenCard+GreenCoin-GreenReq+TempGold3, NewGoldCoinC >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinC))))), ( tempGold(TempGold4), (RedCard+RedCoin >= RedReq; (NewGoldCoinD is RedCard+RedCoin-RedReq+TempGold4, NewGoldCoinD >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinD))))), ( tempGold(TempGold5), (BlackCard+BlackCoin >= BlackReq; (NewGoldCoinE is BlackCard+BlackCoin-BlackReq+TempGold5, NewGoldCoinE >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinE)))))),  free(@indi5), send(@main, display, new(@indi5, bitmap(IndiFile)), point(155,180)), send(@main, flush);  free(@indi5).
updateIndicatorGUI(6) :-indicatorFile(IndiFile),currentPlayer(Player),cardPower(Player,WhiteCard,BlueCard,GreenCard,RedCard,BlackCard),coinPower(Player,WhiteCoin,BlueCoin,GreenCoin,RedCoin,BlackCoin,GoldCoin), readCardSlot(6, Card),[_,Point,Color,WhiteReq,BlueReq,GreenReq,RedReq,BlackReq,_] = Card,(tempGold(IsTempGold),retract(tempGold(_));true),assert(tempGold(GoldCoin)),( ( tempGold(TempGold1), ( WhiteCard+WhiteCoin >= WhiteReq; ( NewGoldCoinA is WhiteCard+WhiteCoin-WhiteReq+TempGold1, NewGoldCoinA >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinA))))), ( tempGold(TempGold2), (BlueCard+BlueCoin >= BlueReq; (NewGoldCoinB is BlueCard+BlueCoin-BlueReq+TempGold2, NewGoldCoinB >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinB))))), ( tempGold(TempGold3), (GreenCard+GreenCoin >= GreenReq; (NewGoldCoinC is GreenCard+GreenCoin-GreenReq+TempGold3, NewGoldCoinC >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinC))))), ( tempGold(TempGold4), (RedCard+RedCoin >= RedReq; (NewGoldCoinD is RedCard+RedCoin-RedReq+TempGold4, NewGoldCoinD >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinD))))), ( tempGold(TempGold5), (BlackCard+BlackCoin >= BlackReq; (NewGoldCoinE is BlackCard+BlackCoin-BlackReq+TempGold5, NewGoldCoinE >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinE)))))),  free(@indi6), send(@main, display, new(@indi6, bitmap(IndiFile)), point(267,180)), send(@main, flush);  free(@indi6).
updateIndicatorGUI(7) :-indicatorFile(IndiFile),currentPlayer(Player),cardPower(Player,WhiteCard,BlueCard,GreenCard,RedCard,BlackCard),coinPower(Player,WhiteCoin,BlueCoin,GreenCoin,RedCoin,BlackCoin,GoldCoin), readCardSlot(7, Card),[_,Point,Color,WhiteReq,BlueReq,GreenReq,RedReq,BlackReq,_] = Card,(tempGold(IsTempGold),retract(tempGold(_));true),assert(tempGold(GoldCoin)),( ( tempGold(TempGold1), ( WhiteCard+WhiteCoin >= WhiteReq; ( NewGoldCoinA is WhiteCard+WhiteCoin-WhiteReq+TempGold1, NewGoldCoinA >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinA))))), ( tempGold(TempGold2), (BlueCard+BlueCoin >= BlueReq; (NewGoldCoinB is BlueCard+BlueCoin-BlueReq+TempGold2, NewGoldCoinB >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinB))))), ( tempGold(TempGold3), (GreenCard+GreenCoin >= GreenReq; (NewGoldCoinC is GreenCard+GreenCoin-GreenReq+TempGold3, NewGoldCoinC >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinC))))), ( tempGold(TempGold4), (RedCard+RedCoin >= RedReq; (NewGoldCoinD is RedCard+RedCoin-RedReq+TempGold4, NewGoldCoinD >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinD))))), ( tempGold(TempGold5), (BlackCard+BlackCoin >= BlackReq; (NewGoldCoinE is BlackCard+BlackCoin-BlackReq+TempGold5, NewGoldCoinE >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinE)))))),  free(@indi7), send(@main, display, new(@indi7, bitmap(IndiFile)), point(379,180)), send(@main, flush);  free(@indi7).
updateIndicatorGUI(8) :-indicatorFile(IndiFile),currentPlayer(Player),cardPower(Player,WhiteCard,BlueCard,GreenCard,RedCard,BlackCard),coinPower(Player,WhiteCoin,BlueCoin,GreenCoin,RedCoin,BlackCoin,GoldCoin), readCardSlot(8, Card),[_,Point,Color,WhiteReq,BlueReq,GreenReq,RedReq,BlackReq,_] = Card,(tempGold(IsTempGold),retract(tempGold(_));true),assert(tempGold(GoldCoin)),( ( tempGold(TempGold1), ( WhiteCard+WhiteCoin >= WhiteReq; ( NewGoldCoinA is WhiteCard+WhiteCoin-WhiteReq+TempGold1, NewGoldCoinA >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinA))))), ( tempGold(TempGold2), (BlueCard+BlueCoin >= BlueReq; (NewGoldCoinB is BlueCard+BlueCoin-BlueReq+TempGold2, NewGoldCoinB >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinB))))), ( tempGold(TempGold3), (GreenCard+GreenCoin >= GreenReq; (NewGoldCoinC is GreenCard+GreenCoin-GreenReq+TempGold3, NewGoldCoinC >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinC))))), ( tempGold(TempGold4), (RedCard+RedCoin >= RedReq; (NewGoldCoinD is RedCard+RedCoin-RedReq+TempGold4, NewGoldCoinD >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinD))))), ( tempGold(TempGold5), (BlackCard+BlackCoin >= BlackReq; (NewGoldCoinE is BlackCard+BlackCoin-BlackReq+TempGold5, NewGoldCoinE >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinE)))))),  free(@indi8), send(@main, display, new(@indi8, bitmap(IndiFile)), point(490,180)), send(@main, flush);  free(@indi8).
updateIndicatorGUI(9) :-indicatorFile(IndiFile),currentPlayer(Player),cardPower(Player,WhiteCard,BlueCard,GreenCard,RedCard,BlackCard),coinPower(Player,WhiteCoin,BlueCoin,GreenCoin,RedCoin,BlackCoin,GoldCoin), readCardSlot(9, Card),[_,Point,Color,WhiteReq,BlueReq,GreenReq,RedReq,BlackReq,_] = Card,(tempGold(IsTempGold),retract(tempGold(_));true),assert(tempGold(GoldCoin)),( ( tempGold(TempGold1), ( WhiteCard+WhiteCoin >= WhiteReq; ( NewGoldCoinA is WhiteCard+WhiteCoin-WhiteReq+TempGold1, NewGoldCoinA >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinA))))), ( tempGold(TempGold2), (BlueCard+BlueCoin >= BlueReq; (NewGoldCoinB is BlueCard+BlueCoin-BlueReq+TempGold2, NewGoldCoinB >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinB))))), ( tempGold(TempGold3), (GreenCard+GreenCoin >= GreenReq; (NewGoldCoinC is GreenCard+GreenCoin-GreenReq+TempGold3, NewGoldCoinC >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinC))))), ( tempGold(TempGold4), (RedCard+RedCoin >= RedReq; (NewGoldCoinD is RedCard+RedCoin-RedReq+TempGold4, NewGoldCoinD >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinD))))), ( tempGold(TempGold5), (BlackCard+BlackCoin >= BlackReq; (NewGoldCoinE is BlackCard+BlackCoin-BlackReq+TempGold5, NewGoldCoinE >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinE)))))),  free(@indi9), send(@main, display, new(@indi9, bitmap(IndiFile)), point(155,35)), send(@main, flush);  free(@indi9).
updateIndicatorGUI(10) :-indicatorFile(IndiFile),currentPlayer(Player),cardPower(Player,WhiteCard,BlueCard,GreenCard,RedCard,BlackCard),coinPower(Player,WhiteCoin,BlueCoin,GreenCoin,RedCoin,BlackCoin,GoldCoin), readCardSlot(10, Card),[_,Point,Color,WhiteReq,BlueReq,GreenReq,RedReq,BlackReq,_] = Card,(tempGold(IsTempGold),retract(tempGold(_));true),assert(tempGold(GoldCoin)),( ( tempGold(TempGold1), ( WhiteCard+WhiteCoin >= WhiteReq; ( NewGoldCoinA is WhiteCard+WhiteCoin-WhiteReq+TempGold1, NewGoldCoinA >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinA))))), ( tempGold(TempGold2), (BlueCard+BlueCoin >= BlueReq; (NewGoldCoinB is BlueCard+BlueCoin-BlueReq+TempGold2, NewGoldCoinB >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinB))))), ( tempGold(TempGold3), (GreenCard+GreenCoin >= GreenReq; (NewGoldCoinC is GreenCard+GreenCoin-GreenReq+TempGold3, NewGoldCoinC >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinC))))), ( tempGold(TempGold4), (RedCard+RedCoin >= RedReq; (NewGoldCoinD is RedCard+RedCoin-RedReq+TempGold4, NewGoldCoinD >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinD))))), ( tempGold(TempGold5), (BlackCard+BlackCoin >= BlackReq; (NewGoldCoinE is BlackCard+BlackCoin-BlackReq+TempGold5, NewGoldCoinE >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinE)))))),  free(@indi10), send(@main, display, new(@indi10, bitmap(IndiFile)), point(267,35)), send(@main, flush);  free(@indi10).
updateIndicatorGUI(11) :-indicatorFile(IndiFile),currentPlayer(Player),cardPower(Player,WhiteCard,BlueCard,GreenCard,RedCard,BlackCard),coinPower(Player,WhiteCoin,BlueCoin,GreenCoin,RedCoin,BlackCoin,GoldCoin), readCardSlot(11, Card),[_,Point,Color,WhiteReq,BlueReq,GreenReq,RedReq,BlackReq,_] = Card,(tempGold(IsTempGold),retract(tempGold(_));true),assert(tempGold(GoldCoin)),( ( tempGold(TempGold1), ( WhiteCard+WhiteCoin >= WhiteReq; ( NewGoldCoinA is WhiteCard+WhiteCoin-WhiteReq+TempGold1, NewGoldCoinA >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinA))))), ( tempGold(TempGold2), (BlueCard+BlueCoin >= BlueReq; (NewGoldCoinB is BlueCard+BlueCoin-BlueReq+TempGold2, NewGoldCoinB >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinB))))), ( tempGold(TempGold3), (GreenCard+GreenCoin >= GreenReq; (NewGoldCoinC is GreenCard+GreenCoin-GreenReq+TempGold3, NewGoldCoinC >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinC))))), ( tempGold(TempGold4), (RedCard+RedCoin >= RedReq; (NewGoldCoinD is RedCard+RedCoin-RedReq+TempGold4, NewGoldCoinD >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinD))))), ( tempGold(TempGold5), (BlackCard+BlackCoin >= BlackReq; (NewGoldCoinE is BlackCard+BlackCoin-BlackReq+TempGold5, NewGoldCoinE >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinE)))))),  free(@indi11), send(@main, display, new(@indi11, bitmap(IndiFile)), point(379,35)), send(@main, flush);  free(@indi11).
updateIndicatorGUI(12) :-indicatorFile(IndiFile),currentPlayer(Player),cardPower(Player,WhiteCard,BlueCard,GreenCard,RedCard,BlackCard),coinPower(Player,WhiteCoin,BlueCoin,GreenCoin,RedCoin,BlackCoin,GoldCoin), readCardSlot(12, Card),[_,Point,Color,WhiteReq,BlueReq,GreenReq,RedReq,BlackReq,_] = Card,(tempGold(IsTempGold),retract(tempGold(_));true),assert(tempGold(GoldCoin)),( ( tempGold(TempGold1), ( WhiteCard+WhiteCoin >= WhiteReq; ( NewGoldCoinA is WhiteCard+WhiteCoin-WhiteReq+TempGold1, NewGoldCoinA >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinA))))), ( tempGold(TempGold2), (BlueCard+BlueCoin >= BlueReq; (NewGoldCoinB is BlueCard+BlueCoin-BlueReq+TempGold2, NewGoldCoinB >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinB))))), ( tempGold(TempGold3), (GreenCard+GreenCoin >= GreenReq; (NewGoldCoinC is GreenCard+GreenCoin-GreenReq+TempGold3, NewGoldCoinC >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinC))))), ( tempGold(TempGold4), (RedCard+RedCoin >= RedReq; (NewGoldCoinD is RedCard+RedCoin-RedReq+TempGold4, NewGoldCoinD >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinD))))), ( tempGold(TempGold5), (BlackCard+BlackCoin >= BlackReq; (NewGoldCoinE is BlackCard+BlackCoin-BlackReq+TempGold5, NewGoldCoinE >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinE)))))),  free(@indi12), send(@main, display, new(@indi12, bitmap(IndiFile)), point(490,35)), send(@main, flush);  free(@indi12).

%p1 reserved indis
updateIndicatorGUI(21) :-indicatorFile(IndiFile),currentPlayer(Player),cardPower(Player,WhiteCard,BlueCard,GreenCard,RedCard,BlackCard),coinPower(Player,WhiteCoin,BlueCoin,GreenCoin,RedCoin,BlackCoin,GoldCoin), readCardSlot(21, Card),[_,Point,Color,WhiteReq,BlueReq,GreenReq,RedReq,BlackReq,_] = Card,(tempGold(IsTempGold),retract(tempGold(_));true),assert(tempGold(GoldCoin)),( ( tempGold(TempGold1), ( WhiteCard+WhiteCoin >= WhiteReq; ( NewGoldCoinA is WhiteCard+WhiteCoin-WhiteReq+TempGold1, NewGoldCoinA >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinA))))), ( tempGold(TempGold2), (BlueCard+BlueCoin >= BlueReq; (NewGoldCoinB is BlueCard+BlueCoin-BlueReq+TempGold2, NewGoldCoinB >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinB))))), ( tempGold(TempGold3), (GreenCard+GreenCoin >= GreenReq; (NewGoldCoinC is GreenCard+GreenCoin-GreenReq+TempGold3, NewGoldCoinC >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinC))))), ( tempGold(TempGold4), (RedCard+RedCoin >= RedReq; (NewGoldCoinD is RedCard+RedCoin-RedReq+TempGold4, NewGoldCoinD >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinD))))), ( tempGold(TempGold5), (BlackCard+BlackCoin >= BlackReq; (NewGoldCoinE is BlackCard+BlackCoin-BlackReq+TempGold5, NewGoldCoinE >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinE)))))),  free(@indi21), send(@main, display, new(@indi21, bitmap(IndiFile)), point(65,555)), send(@main, flush);  free(@indi21).
updateIndicatorGUI(22) :-indicatorFile(IndiFile),currentPlayer(Player),cardPower(Player,WhiteCard,BlueCard,GreenCard,RedCard,BlackCard),coinPower(Player,WhiteCoin,BlueCoin,GreenCoin,RedCoin,BlackCoin,GoldCoin), readCardSlot(22, Card),[_,Point,Color,WhiteReq,BlueReq,GreenReq,RedReq,BlackReq,_] = Card,(tempGold(IsTempGold),retract(tempGold(_));true),assert(tempGold(GoldCoin)),( ( tempGold(TempGold1), ( WhiteCard+WhiteCoin >= WhiteReq; ( NewGoldCoinA is WhiteCard+WhiteCoin-WhiteReq+TempGold1, NewGoldCoinA >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinA))))), ( tempGold(TempGold2), (BlueCard+BlueCoin >= BlueReq; (NewGoldCoinB is BlueCard+BlueCoin-BlueReq+TempGold2, NewGoldCoinB >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinB))))), ( tempGold(TempGold3), (GreenCard+GreenCoin >= GreenReq; (NewGoldCoinC is GreenCard+GreenCoin-GreenReq+TempGold3, NewGoldCoinC >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinC))))), ( tempGold(TempGold4), (RedCard+RedCoin >= RedReq; (NewGoldCoinD is RedCard+RedCoin-RedReq+TempGold4, NewGoldCoinD >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinD))))), ( tempGold(TempGold5), (BlackCard+BlackCoin >= BlackReq; (NewGoldCoinE is BlackCard+BlackCoin-BlackReq+TempGold5, NewGoldCoinE >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinE)))))),  free(@indi22), send(@main, display, new(@indi22, bitmap(IndiFile)), point(125,590)), send(@main, flush);  free(@indi22).
updateIndicatorGUI(23) :-indicatorFile(IndiFile),currentPlayer(Player),cardPower(Player,WhiteCard,BlueCard,GreenCard,RedCard,BlackCard),coinPower(Player,WhiteCoin,BlueCoin,GreenCoin,RedCoin,BlackCoin,GoldCoin), readCardSlot(23, Card),[_,Point,Color,WhiteReq,BlueReq,GreenReq,RedReq,BlackReq,_] = Card,(tempGold(IsTempGold),retract(tempGold(_));true),assert(tempGold(GoldCoin)),( ( tempGold(TempGold1), ( WhiteCard+WhiteCoin >= WhiteReq; ( NewGoldCoinA is WhiteCard+WhiteCoin-WhiteReq+TempGold1, NewGoldCoinA >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinA))))), ( tempGold(TempGold2), (BlueCard+BlueCoin >= BlueReq; (NewGoldCoinB is BlueCard+BlueCoin-BlueReq+TempGold2, NewGoldCoinB >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinB))))), ( tempGold(TempGold3), (GreenCard+GreenCoin >= GreenReq; (NewGoldCoinC is GreenCard+GreenCoin-GreenReq+TempGold3, NewGoldCoinC >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinC))))), ( tempGold(TempGold4), (RedCard+RedCoin >= RedReq; (NewGoldCoinD is RedCard+RedCoin-RedReq+TempGold4, NewGoldCoinD >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinD))))), ( tempGold(TempGold5), (BlackCard+BlackCoin >= BlackReq; (NewGoldCoinE is BlackCard+BlackCoin-BlackReq+TempGold5, NewGoldCoinE >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinE)))))),  free(@indi23), send(@main, display, new(@indi23, bitmap(IndiFile)), point(185,625)), send(@main, flush);  free(@indi23).

%p2 reserved indis
updateIndicatorGUI(24) :-indicatorFile(IndiFile),currentPlayer(Player),cardPower(Player,WhiteCard,BlueCard,GreenCard,RedCard,BlackCard),coinPower(Player,WhiteCoin,BlueCoin,GreenCoin,RedCoin,BlackCoin,GoldCoin), readCardSlot(24, Card),[_,Point,Color,WhiteReq,BlueReq,GreenReq,RedReq,BlackReq,_] = Card,(tempGold(IsTempGold),retract(tempGold(_));true),assert(tempGold(GoldCoin)),( ( tempGold(TempGold1), ( WhiteCard+WhiteCoin >= WhiteReq; ( NewGoldCoinA is WhiteCard+WhiteCoin-WhiteReq+TempGold1, NewGoldCoinA >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinA))))), ( tempGold(TempGold2), (BlueCard+BlueCoin >= BlueReq; (NewGoldCoinB is BlueCard+BlueCoin-BlueReq+TempGold2, NewGoldCoinB >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinB))))), ( tempGold(TempGold3), (GreenCard+GreenCoin >= GreenReq; (NewGoldCoinC is GreenCard+GreenCoin-GreenReq+TempGold3, NewGoldCoinC >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinC))))), ( tempGold(TempGold4), (RedCard+RedCoin >= RedReq; (NewGoldCoinD is RedCard+RedCoin-RedReq+TempGold4, NewGoldCoinD >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinD))))), ( tempGold(TempGold5), (BlackCard+BlackCoin >= BlackReq; (NewGoldCoinE is BlackCard+BlackCoin-BlackReq+TempGold5, NewGoldCoinE >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinE)))))),  free(@indi24), send(@main, display, new(@indi24, bitmap(IndiFile)), point(330,555)), send(@main, flush);  free(@indi24).
updateIndicatorGUI(25) :-indicatorFile(IndiFile),currentPlayer(Player),cardPower(Player,WhiteCard,BlueCard,GreenCard,RedCard,BlackCard),coinPower(Player,WhiteCoin,BlueCoin,GreenCoin,RedCoin,BlackCoin,GoldCoin), readCardSlot(25, Card),[_,Point,Color,WhiteReq,BlueReq,GreenReq,RedReq,BlackReq,_] = Card,(tempGold(IsTempGold),retract(tempGold(_));true),assert(tempGold(GoldCoin)),( ( tempGold(TempGold1), ( WhiteCard+WhiteCoin >= WhiteReq; ( NewGoldCoinA is WhiteCard+WhiteCoin-WhiteReq+TempGold1, NewGoldCoinA >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinA))))), ( tempGold(TempGold2), (BlueCard+BlueCoin >= BlueReq; (NewGoldCoinB is BlueCard+BlueCoin-BlueReq+TempGold2, NewGoldCoinB >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinB))))), ( tempGold(TempGold3), (GreenCard+GreenCoin >= GreenReq; (NewGoldCoinC is GreenCard+GreenCoin-GreenReq+TempGold3, NewGoldCoinC >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinC))))), ( tempGold(TempGold4), (RedCard+RedCoin >= RedReq; (NewGoldCoinD is RedCard+RedCoin-RedReq+TempGold4, NewGoldCoinD >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinD))))), ( tempGold(TempGold5), (BlackCard+BlackCoin >= BlackReq; (NewGoldCoinE is BlackCard+BlackCoin-BlackReq+TempGold5, NewGoldCoinE >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinE)))))),  free(@indi25), send(@main, display, new(@indi25, bitmap(IndiFile)), point(390,590)), send(@main, flush);  free(@indi25).
updateIndicatorGUI(26) :-indicatorFile(IndiFile),currentPlayer(Player),cardPower(Player,WhiteCard,BlueCard,GreenCard,RedCard,BlackCard),coinPower(Player,WhiteCoin,BlueCoin,GreenCoin,RedCoin,BlackCoin,GoldCoin), readCardSlot(26, Card),[_,Point,Color,WhiteReq,BlueReq,GreenReq,RedReq,BlackReq,_] = Card,(tempGold(IsTempGold),retract(tempGold(_));true),assert(tempGold(GoldCoin)),( ( tempGold(TempGold1), ( WhiteCard+WhiteCoin >= WhiteReq; ( NewGoldCoinA is WhiteCard+WhiteCoin-WhiteReq+TempGold1, NewGoldCoinA >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinA))))), ( tempGold(TempGold2), (BlueCard+BlueCoin >= BlueReq; (NewGoldCoinB is BlueCard+BlueCoin-BlueReq+TempGold2, NewGoldCoinB >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinB))))), ( tempGold(TempGold3), (GreenCard+GreenCoin >= GreenReq; (NewGoldCoinC is GreenCard+GreenCoin-GreenReq+TempGold3, NewGoldCoinC >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinC))))), ( tempGold(TempGold4), (RedCard+RedCoin >= RedReq; (NewGoldCoinD is RedCard+RedCoin-RedReq+TempGold4, NewGoldCoinD >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinD))))), ( tempGold(TempGold5), (BlackCard+BlackCoin >= BlackReq; (NewGoldCoinE is BlackCard+BlackCoin-BlackReq+TempGold5, NewGoldCoinE >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinE)))))),  free(@indi26), send(@main, display, new(@indi26, bitmap(IndiFile)), point(450,625)), send(@main, flush);  free(@indi26).

%p3 reserved indis
updateIndicatorGUI(27) :-indicatorFile(IndiFile),currentPlayer(Player),cardPower(Player,WhiteCard,BlueCard,GreenCard,RedCard,BlackCard),coinPower(Player,WhiteCoin,BlueCoin,GreenCoin,RedCoin,BlackCoin,GoldCoin), readCardSlot(27, Card),[_,Point,Color,WhiteReq,BlueReq,GreenReq,RedReq,BlackReq,_] = Card,(tempGold(IsTempGold),retract(tempGold(_));true),assert(tempGold(GoldCoin)),( ( tempGold(TempGold1), ( WhiteCard+WhiteCoin >= WhiteReq; ( NewGoldCoinA is WhiteCard+WhiteCoin-WhiteReq+TempGold1, NewGoldCoinA >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinA))))), ( tempGold(TempGold2), (BlueCard+BlueCoin >= BlueReq; (NewGoldCoinB is BlueCard+BlueCoin-BlueReq+TempGold2, NewGoldCoinB >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinB))))), ( tempGold(TempGold3), (GreenCard+GreenCoin >= GreenReq; (NewGoldCoinC is GreenCard+GreenCoin-GreenReq+TempGold3, NewGoldCoinC >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinC))))), ( tempGold(TempGold4), (RedCard+RedCoin >= RedReq; (NewGoldCoinD is RedCard+RedCoin-RedReq+TempGold4, NewGoldCoinD >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinD))))), ( tempGold(TempGold5), (BlackCard+BlackCoin >= BlackReq; (NewGoldCoinE is BlackCard+BlackCoin-BlackReq+TempGold5, NewGoldCoinE >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinE)))))),  free(@indi27), send(@main, display, new(@indi27, bitmap(IndiFile)), point(595,555)), send(@main, flush);  free(@indi27).
updateIndicatorGUI(28) :-indicatorFile(IndiFile),currentPlayer(Player),cardPower(Player,WhiteCard,BlueCard,GreenCard,RedCard,BlackCard),coinPower(Player,WhiteCoin,BlueCoin,GreenCoin,RedCoin,BlackCoin,GoldCoin), readCardSlot(28, Card),[_,Point,Color,WhiteReq,BlueReq,GreenReq,RedReq,BlackReq,_] = Card,(tempGold(IsTempGold),retract(tempGold(_));true),assert(tempGold(GoldCoin)),( ( tempGold(TempGold1), ( WhiteCard+WhiteCoin >= WhiteReq; ( NewGoldCoinA is WhiteCard+WhiteCoin-WhiteReq+TempGold1, NewGoldCoinA >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinA))))), ( tempGold(TempGold2), (BlueCard+BlueCoin >= BlueReq; (NewGoldCoinB is BlueCard+BlueCoin-BlueReq+TempGold2, NewGoldCoinB >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinB))))), ( tempGold(TempGold3), (GreenCard+GreenCoin >= GreenReq; (NewGoldCoinC is GreenCard+GreenCoin-GreenReq+TempGold3, NewGoldCoinC >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinC))))), ( tempGold(TempGold4), (RedCard+RedCoin >= RedReq; (NewGoldCoinD is RedCard+RedCoin-RedReq+TempGold4, NewGoldCoinD >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinD))))), ( tempGold(TempGold5), (BlackCard+BlackCoin >= BlackReq; (NewGoldCoinE is BlackCard+BlackCoin-BlackReq+TempGold5, NewGoldCoinE >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinE)))))),  free(@indi28), send(@main, display, new(@indi28, bitmap(IndiFile)), point(655,590)), send(@main, flush);  free(@indi28).
updateIndicatorGUI(29) :-indicatorFile(IndiFile),currentPlayer(Player),cardPower(Player,WhiteCard,BlueCard,GreenCard,RedCard,BlackCard),coinPower(Player,WhiteCoin,BlueCoin,GreenCoin,RedCoin,BlackCoin,GoldCoin), readCardSlot(29, Card),[_,Point,Color,WhiteReq,BlueReq,GreenReq,RedReq,BlackReq,_] = Card,(tempGold(IsTempGold),retract(tempGold(_));true),assert(tempGold(GoldCoin)),( ( tempGold(TempGold1), ( WhiteCard+WhiteCoin >= WhiteReq; ( NewGoldCoinA is WhiteCard+WhiteCoin-WhiteReq+TempGold1, NewGoldCoinA >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinA))))), ( tempGold(TempGold2), (BlueCard+BlueCoin >= BlueReq; (NewGoldCoinB is BlueCard+BlueCoin-BlueReq+TempGold2, NewGoldCoinB >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinB))))), ( tempGold(TempGold3), (GreenCard+GreenCoin >= GreenReq; (NewGoldCoinC is GreenCard+GreenCoin-GreenReq+TempGold3, NewGoldCoinC >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinC))))), ( tempGold(TempGold4), (RedCard+RedCoin >= RedReq; (NewGoldCoinD is RedCard+RedCoin-RedReq+TempGold4, NewGoldCoinD >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinD))))), ( tempGold(TempGold5), (BlackCard+BlackCoin >= BlackReq; (NewGoldCoinE is BlackCard+BlackCoin-BlackReq+TempGold5, NewGoldCoinE >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinE)))))),  free(@indi29), send(@main, display, new(@indi29, bitmap(IndiFile)), point(715,625)), send(@main, flush);  free(@indi29).

%p4 reserved indis
updateIndicatorGUI(30) :-indicatorFile(IndiFile),currentPlayer(Player),cardPower(Player,WhiteCard,BlueCard,GreenCard,RedCard,BlackCard),coinPower(Player,WhiteCoin,BlueCoin,GreenCoin,RedCoin,BlackCoin,GoldCoin), readCardSlot(30, Card),[_,Point,Color,WhiteReq,BlueReq,GreenReq,RedReq,BlackReq,_] = Card,(tempGold(IsTempGold),retract(tempGold(_));true),assert(tempGold(GoldCoin)),( ( tempGold(TempGold1), ( WhiteCard+WhiteCoin >= WhiteReq; ( NewGoldCoinA is WhiteCard+WhiteCoin-WhiteReq+TempGold1, NewGoldCoinA >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinA))))), ( tempGold(TempGold2), (BlueCard+BlueCoin >= BlueReq; (NewGoldCoinB is BlueCard+BlueCoin-BlueReq+TempGold2, NewGoldCoinB >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinB))))), ( tempGold(TempGold3), (GreenCard+GreenCoin >= GreenReq; (NewGoldCoinC is GreenCard+GreenCoin-GreenReq+TempGold3, NewGoldCoinC >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinC))))), ( tempGold(TempGold4), (RedCard+RedCoin >= RedReq; (NewGoldCoinD is RedCard+RedCoin-RedReq+TempGold4, NewGoldCoinD >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinD))))), ( tempGold(TempGold5), (BlackCard+BlackCoin >= BlackReq; (NewGoldCoinE is BlackCard+BlackCoin-BlackReq+TempGold5, NewGoldCoinE >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinE)))))),  free(@indi30), send(@main, display, new(@indi30, bitmap(IndiFile)), point(860,555)), send(@main, flush);  free(@indi30).
updateIndicatorGUI(31) :-indicatorFile(IndiFile),currentPlayer(Player),cardPower(Player,WhiteCard,BlueCard,GreenCard,RedCard,BlackCard),coinPower(Player,WhiteCoin,BlueCoin,GreenCoin,RedCoin,BlackCoin,GoldCoin), readCardSlot(31, Card),[_,Point,Color,WhiteReq,BlueReq,GreenReq,RedReq,BlackReq,_] = Card,(tempGold(IsTempGold),retract(tempGold(_));true),assert(tempGold(GoldCoin)),( ( tempGold(TempGold1), ( WhiteCard+WhiteCoin >= WhiteReq; ( NewGoldCoinA is WhiteCard+WhiteCoin-WhiteReq+TempGold1, NewGoldCoinA >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinA))))), ( tempGold(TempGold2), (BlueCard+BlueCoin >= BlueReq; (NewGoldCoinB is BlueCard+BlueCoin-BlueReq+TempGold2, NewGoldCoinB >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinB))))), ( tempGold(TempGold3), (GreenCard+GreenCoin >= GreenReq; (NewGoldCoinC is GreenCard+GreenCoin-GreenReq+TempGold3, NewGoldCoinC >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinC))))), ( tempGold(TempGold4), (RedCard+RedCoin >= RedReq; (NewGoldCoinD is RedCard+RedCoin-RedReq+TempGold4, NewGoldCoinD >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinD))))), ( tempGold(TempGold5), (BlackCard+BlackCoin >= BlackReq; (NewGoldCoinE is BlackCard+BlackCoin-BlackReq+TempGold5, NewGoldCoinE >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinE)))))),  free(@indi31), send(@main, display, new(@indi31, bitmap(IndiFile)), point(920,590)), send(@main, flush);  free(@indi31).
updateIndicatorGUI(32) :-indicatorFile(IndiFile),currentPlayer(Player),cardPower(Player,WhiteCard,BlueCard,GreenCard,RedCard,BlackCard),coinPower(Player,WhiteCoin,BlueCoin,GreenCoin,RedCoin,BlackCoin,GoldCoin), readCardSlot(32, Card),[_,Point,Color,WhiteReq,BlueReq,GreenReq,RedReq,BlackReq,_] = Card,(tempGold(IsTempGold),retract(tempGold(_));true),assert(tempGold(GoldCoin)),( ( tempGold(TempGold1), ( WhiteCard+WhiteCoin >= WhiteReq; ( NewGoldCoinA is WhiteCard+WhiteCoin-WhiteReq+TempGold1, NewGoldCoinA >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinA))))), ( tempGold(TempGold2), (BlueCard+BlueCoin >= BlueReq; (NewGoldCoinB is BlueCard+BlueCoin-BlueReq+TempGold2, NewGoldCoinB >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinB))))), ( tempGold(TempGold3), (GreenCard+GreenCoin >= GreenReq; (NewGoldCoinC is GreenCard+GreenCoin-GreenReq+TempGold3, NewGoldCoinC >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinC))))), ( tempGold(TempGold4), (RedCard+RedCoin >= RedReq; (NewGoldCoinD is RedCard+RedCoin-RedReq+TempGold4, NewGoldCoinD >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinD))))), ( tempGold(TempGold5), (BlackCard+BlackCoin >= BlackReq; (NewGoldCoinE is BlackCard+BlackCoin-BlackReq+TempGold5, NewGoldCoinE >= 0, retract(tempGold(_)),assert(tempGold(NewGoldCoinE)))))),  free(@indi32), send(@main, display, new(@indi32, bitmap(IndiFile)), point(980,625)), send(@main, flush);  free(@indi32).

updateIndicatorGUI :-
  %clearIndicatorGUI,
  currentPlayer(Player),
  playerNo(PlaNoo,Player),
  PlaNoo2 is PlaNoo+6,
  PlaNoo3 is PlaNoo2*3,
  PlaNoo4 is PlaNoo3+2,
  forall( between(1, 12, IndiNo),
    (
      updateIndicatorGUI(IndiNo)
    )
  ),
  forall( between(PlaNoo3, PlaNoo4, IndiNo2),
    (
      updateIndicatorGUI(IndiNo2)
    )
  ).


clearIndicatorGUI(1) :- free(@indi1).
clearIndicatorGUI(2) :- free(@indi2).
clearIndicatorGUI(3) :- free(@indi3).
clearIndicatorGUI(4) :- free(@indi4).
clearIndicatorGUI(5) :- free(@indi5).
clearIndicatorGUI(6) :- free(@indi6).
clearIndicatorGUI(7) :- free(@indi7).
clearIndicatorGUI(8) :- free(@indi8).
clearIndicatorGUI(9) :- free(@indi9).
clearIndicatorGUI(10) :- free(@indi10).
clearIndicatorGUI(11) :- free(@indi11).
clearIndicatorGUI(12) :- free(@indi12).
clearIndicatorGUI(13) :- free(@indi21).
clearIndicatorGUI(14) :- free(@indi22).
clearIndicatorGUI(15) :- free(@indi23).
clearIndicatorGUI(16) :- free(@indi24).
clearIndicatorGUI(17) :- free(@indi25).
clearIndicatorGUI(18) :- free(@indi26).
clearIndicatorGUI(19) :- free(@indi27).
clearIndicatorGUI(20) :- free(@indi28).
clearIndicatorGUI(21) :- free(@indi29).
clearIndicatorGUI(22) :- free(@indi30).
clearIndicatorGUI(23) :- free(@indi31).
clearIndicatorGUI(24) :- free(@indi32).

clearIndicatorGUI :-
  forall( between(1, 24, IndiNo),
    (
      clearIndicatorGUI(IndiNo)
    )
  ).

updateCardSlotsGUI :-
  forall( between(1, 32, SlotNo),
    (
      updateCardSlotsGUI(SlotNo)
    )
  ).

initializeBoard :-
  new(@main, dialog('Splendorr!')),
  boardFile(BoardFile),
  send(@main, display, new(@board, bitmap(BoardFile)), point(0,0)),

  send(@main, display, text('1',center,large), point(198, 310)),
  send(@main, display, text('2',center,large), point(305, 310)),
  send(@main, display, text('3',center,large), point(417, 310)),
  send(@main, display, text('4',center,large), point(528, 310)),
  send(@main, display, text('5',center,large), point(198, 165)),
  send(@main, display, text('6',center,large), point(305, 165)),
  send(@main, display, text('7',center,large), point(417, 165)),
  send(@main, display, text('8',center,large), point(528, 165)),
  send(@main, display, text('9',center,large), point(198, 20)),
  send(@main, display, text('10',center,large), point(305, 20)),
  send(@main, display, text('11',center,large), point(417, 20)),
  send(@main, display, text('12',center,large), point(528, 20)),

  send(@main, display, text('21',center,large), point(101, 540)),
  send(@main, display, text('22',center,large), point(161, 575)),
  send(@main, display, text('23',center,large), point(221, 610)),

  send(@main, display, text('24',center,large), point(366, 540)),
  send(@main, display, text('25',center,large), point(426, 575)),
  send(@main, display, text('26',center,large), point(486, 610)),

  send(@main, display, text('27',center,large), point(631, 540)),
  send(@main, display, text('28',center,large), point(691, 575)),
  send(@main, display, text('29',center,large), point(751, 610)),

  send(@main, display, text('30',center,large), point(896, 540)),
  send(@main, display, text('31',center,large), point(956, 575)),
  send(@main, display, text('32',center,large), point(1016, 610)),

  send(@main, display, text('/10',center,large), point(47, 489)),
  send(@main, display, text('/10',center,large), point(310, 489)),
  send(@main, display, text('/10',center,large), point(574, 489)),
  send(@main, display, text('/10',center,large), point(844, 489)),
  playerCount(PlayerCount),
  (
    (
      PlayerCount == 2,
      getTwoPlayerNames(X,Y),
      send(@main, display, text(X,center,large), point(140, 455)),
      send(@main, display, text(Y,center,large), point(405, 455))
    );
    (
      PlayerCount == 3,
      getThreePlayerNames(X,Y,Z),
      send(@main, display, text(X,center,large), point(140, 455)),
      send(@main, display, text(Y,center,large), point(405, 455)),
      send(@main, display, text(Z,center,large), point(670, 455))
    );
    (
      PlayerCount == 4,
      getFourPlayerNames(X,Y,Z,T),
      send(@main, display, text(X,center,large), point(140, 455)),
      send(@main, display, text(Y,center,large), point(405, 455)),
      send(@main, display, text(Z,center,large), point(670, 455)),
      send(@main, display, text(T,center,large), point(935, 455))
    )
  ),
  send(@main, open).

